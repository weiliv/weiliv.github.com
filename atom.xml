<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Meet @五角场民工]]></title>
  <link href="http://weiliv.github.io/atom.xml" rel="self"/>
  <link href="http://weiliv.github.io/"/>
  <updated>2014-09-09T20:33:56+08:00</updated>
  <id>http://weiliv.github.io/</id>
  <author>
    <name><![CDATA[Wei Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iTunes Connect: Can't save app information 导致不能提交新版本的解决方法]]></title>
    <link href="http://weiliv.github.io/blog/2014/09/09/itunes-connect-cant-save-app-information-dao-zhi-bu-neng-ti-jiao-xin-ban-ben-de-jie-jue-fang-fa/"/>
    <updated>2014-09-09T18:18:00+08:00</updated>
    <id>http://weiliv.github.io/blog/2014/09/09/itunes-connect-cant-save-app-information-dao-zhi-bu-neng-ti-jiao-xin-ban-ben-de-jie-jue-fang-fa</id>
    <content type="html"><![CDATA[<p>iTunesConnect改版后UI上更酷炫了，但是功能上却出现了一些让人抓狂的bug。</p>

<p>周末提交app给apple审核，打包上传后发现点击<em>Submit For Review</em>总是出现下面的错误：</p>

<p><strong>Your app information could not be saved. Try again. If the problem persists, cantact us.</strong></p>

<p>然后就遵循提示试了几次，还是出现相同的bug。Chrome抓包显示的是 <strong>We&rsquo;ve got a server error &hellip; 500</strong>  一度想等它恢复。 后来去so上看有木有遇到相同问题的小伙伴，还真有，不过大多是版本号冲突的原因，我也尝试着更改版本号，问题依旧。。</p>

<p>后来发现一韩国哥们也遇到了相同的问题，于是怀疑是不是包里面包含的中文字符导致不能识别，然后就发现了问题所在，<strong>Product Name</strong>不能为中文！之后把<em>XCode-Targets-Packaging</em>下的<em>Product Name</em>改成了英文，相应的在<em>info.plist</em>文件中修改<em>Bundle name</em>和<em>Bundle display name</em>为之前的中文app名。之后打包上传，顺利地Waiting For Review了。</p>

<p>Apple， 还我为你折腾的这两三个小时啊！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ARC Notes - Part 2 - More about Lifecycles]]></title>
    <link href="http://weiliv.github.io/blog/2013/06/18/arc-notes-part-2/"/>
    <updated>2013-06-18T18:39:00+08:00</updated>
    <id>http://weiliv.github.io/blog/2013/06/18/arc-notes-part-2</id>
    <content type="html"><![CDATA[<h2><em>__strong</em></h2>

<p>Let&rsquo;s talk over the vars declared as <em>__strong</em> or declared default as <em>__strong</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * create object and take its ownership</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">id</span> <span class="n">__strong</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * obj always has ownership inside here</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * out of the lifecycle, the object of obj has been released</span>
</span><span class='line'><span class="cm">     */</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * create object but has no ownership</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">id</span> <span class="n">__strong</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * because obj is __strong, it hold the object</span>
</span><span class='line'><span class="cm">     * compiler put obj in autoreleasepool</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * out of the lifecycle, the object of obj has been released</span>
</span><span class='line'><span class="cm">     */</span>
</span></code></pre></td></tr></table></div></figure>


<p>Though the var <em>obj</em> is not obtained by <em>alloc/new/copy/mutableCopy</em> functions, the <em>obj</em> is <em>__strong</em> reference and can be holder. That&rsquo;s all what compiler do.</p>

<p>In addition, var&rsquo;s default type is <em>__stong</em>, and if it reference to new values, the old one is released. <em>obj = nil</em> means release current object referenced by <em>obj</em>.</p>

<h2>__weak</h2>

<h3>about compiler</h3>

<p>And the <em>__weak</em> vars is put into <em>autoreleasepool</em> when it is being used. Why? Just turn to its definition~ What will happen when the object referenced by weak vars is released/destroyed? That&rsquo;ll crash! So the compiler put it to an autoreleasepool to solve the problem.</p>

<h3>retain cycle</h3>

<p>In most of the situations, it&rsquo;s enough to user <em>__strong</em>. But when it comes to <strong>retain cycle</strong>, <em>__weak</em> takes its place.</p>

<h3>outlet</h3>

<p>There&rsquo;s an advantage when outlet user <em>weak property</em>. It can simplify the process of viewDidUnload/didReceiveMemeoryWarning.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UILabel</span> <span class="o">*</span><span class="n">label</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didReceiveMemoryWarning</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">didReceiveMemoryWarning</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">isViewLoaded</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">window</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">label</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span> <span class="c1">// release object</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If no <em>self.label = nil</em> here, there is a leak of memory. But when use weak property:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UILabel</span> <span class="o">*</span><span class="n">label</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didReceiveMemoryWarning</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">didReceiveMemoryWarning</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">isViewLoaded</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">window</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">//nothing to do here...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But not all outlet should use weak property, such as self.vew … It depends.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ARC Notes - Part 1 - Basics]]></title>
    <link href="http://weiliv.github.io/blog/2013/06/17/arc-notes/"/>
    <updated>2013-06-17T17:45:00+08:00</updated>
    <id>http://weiliv.github.io/blog/2013/06/17/arc-notes</id>
    <content type="html"><![CDATA[<h2>What is ARC?</h2>

<blockquote><p><em>Automatic Reference Counting (ARC) is a compiler feature that provides automatic memory management of Objective-C objects. Rather than having to think about retain and release operations, ARC allows you to concentrate on the interesting code.</em></p></blockquote>

<h3>Advantages of ARC</h3>

<ol>
<li>Less work</li>
<li>Neater appearance</li>
<li>More efficient code</li>
</ol>


<h3>Basic Rules of ARC</h3>

<ul>
<li><code>retain, release, autorelease, dealloc</code> are auto-inserted by compliler and can&rsquo;t be called in our code.</li>
<li>Though <code>dealloc</code> can be overload, you can&rsquo;t call <code>[super dealloc]</code>.</li>
<li>use <code>__bridge</code> to cast between <code>id</code> and <code>void *</code></li>
<li>replace <code>NSAutoReleasePool</code> with <code>@autoreleasepool</code></li>
</ul>


<h3>Objectics under ARC</h3>

<blockquote><p>ARC introduces several new lifetime qualifiers for objects, and weak references. A weak reference does not extend the lifetime of the object it points to, and automatically becomes nil when there are no strong references to the object.</p>

<p>You should take advantage of these qualifiers to manage the object graphs in your program. In particular, ARC does not guard agains strong reference cycles. Judicious use of weak relationships will help to ensure you don’t create cycles.</p></blockquote>

<h4>Strong reference</h4>

<p><a href="http://weiliv.github.io/images/ARC/ARC_outline_strong.JPG" class="fancybox" title=""><img src="http://weiliv.github.io/images/ARC/ARC_outline_strong.JPG" alt="" /></a></p>

<h4>Weak reference</h4>

<p><a href="http://weiliv.github.io/images/ARC/ARC_outline_weak.png" class="fancybox" title=""><img src="http://weiliv.github.io/images/ARC/ARC_outline_weak.png" alt="" /></a></p>

<ol>
<li><code>firstname</code> is <code>@"natsu"</code> object&rsquo;s holder, in other words, <code>fistname</code> is <code>NSString</code> type object&rsquo;s strong reference.</li>
<li>Using qualifier <code>__weak</code> to desprate that <code>weakName</code> is a weak reference and can access <code>@"natsu"</code>, but it&rsquo;s not <code>@"natsu"</code>&rsquo;s holder.</li>
<li>After <code>firstName</code> pointing to new object <code>@"maki"</code> and becoming its holder, the previous object <code>@"natsu"</code> has no holder and be destroyed immediately. At the same time, var <code>weakName</code> becomes <code>nil</code> automatically.</li>
</ol>


<h4>Variable Qualifiers</h4>

<p><code>__strong, __weak, __unsafe_unretained, __autoreleasing</code></p>

<ul>
<li><p><strong>__strong</strong> is the default. An object remains “alive” as long as there is a strong pointer to it.</p></li>
<li><p><strong>__weak</strong> specifies a reference that does not keep the referenced object alive. A weak reference is set to <code>nil</code> when there are no strong references to the object.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">NSString</span> <span class="n">__weak</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFormat:</span><span class="s">@&quot;First Name: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span> <span class="n">firstName</span><span class="p">]];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;string: %@&quot;</span><span class="p">,</span> <span class="n">string</span><span class="p">);</span> <span class="c1">//string is nil</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><strong>__unsafe_unretained</strong> specifies a reference that does not keep the referenced object alive and is not set to <code>nil</code> when there are no strong references to the object. If the object it references is deallocated, the pointer is left dangling.</p></li>
<li><p><strong>__autoreleasing</strong> is used to denote arguments that are passed by reference (<code>id *</code>) and are autoreleased on return. It delayes the release of object, such as:</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">generateErrorInVariable:</span><span class="p">(</span><span class="n">__autoreleasing</span> <span class="n">NSError</span> <span class="o">**</span><span class="p">)</span><span class="nv">paramError</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">....</span>
</span><span class='line'>    <span class="o">*</span><span class="n">paramError</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSError</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithDomain:</span><span class="s">@&quot;MyApp&quot;</span> <span class="nl">code:</span><span class="mi">1</span> <span class="nl">userInfo:</span><span class="n">errorDictionary</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">....</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">generateErrorInVariable:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Error = %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The returned value of functions as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">//non-ARC</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">stringTest</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">retStr</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString:</span><span class="err">@”</span><span class="n">test</span><span class="err">”</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">retStr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ARC</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">stringTest</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">__autoreleasing</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">retStr</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString:</span><span class="s">@&quot;test&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">retStr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>About <em>@property</em></h2>

<h3>Ownership</h3>

<p>Here is relationship between propertis and variale qualifiers.</p>

<table>
<thead>
<tr>
<th>Property     </th>
<th> Qualifier     </th>
<th align="center"> Ownership</th>
</tr>
</thead>
<tbody>
<tr>
<td>strong       </td>
<td> __strong      </td>
<td align="center"> YES</td>
</tr>
<tr>
<td>weak         </td>
<td> __weak        </td>
<td align="center"> NO</td>
</tr>
<tr>
<td>unsafe_unretained</td>
<td> __unsafe_unretained</td>
<td align="center"> NO</td>
</tr>
<tr>
<td>copy         </td>
<td> __strong      </td>
<td align="center"> YES</td>
</tr>
<tr>
<td>assign       </td>
<td> __unsafe_unretained</td>
<td align="center"> NO</td>
</tr>
<tr>
<td>retain       </td>
<td> __strong      </td>
<td align="center"> YES</td>
</tr>
</tbody>
</table>


<ul>
<li><em>delegate</em> or <em>outlet</em> should be declared as <em>weak</em></li>
<li>Scalar varibles should be declared as <em>assign</em>, such as <em>int, BOOL</em></li>
</ul>


<h3>readwrite, readonly</h3>

<p>Pay attention to <strong>Readonly</strong> property under ARC.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">readonly</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Generally, we do not need the ownership of vars declared as <em>readonly</em>. But under ARC, the upper code will obtain error message:</p>

<blockquote><p>“ARC forbids synthesizing a property of an Objective-C object with unspecified ownership or storage attribute”</p></blockquote>

<p>So the ownership of the var should be declared.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">readonly</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>
But for scalar varibles, the default property is <em>assign</em>, so it&rsquo;s unnecessary to declare the var&rsquo;s ownership.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS7 UI Preview]]></title>
    <link href="http://weiliv.github.io/blog/2013/06/14/ios7-ui-preview/"/>
    <updated>2013-06-14T18:55:00+08:00</updated>
    <id>http://weiliv.github.io/blog/2013/06/14/ios7-ui-preview</id>
    <content type="html"><![CDATA[<p>To keep current :), my &ldquo;aged&rdquo; iPhone4 was renewed with iOS7 involed in WWDC2013.</p>

<ul class="gallery">
<li><a href="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0103.jpg" class="fancybox" rel="gallery-e901cdf7096ccfe5b5a5f8820ebcb060" title=""><img src="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0103_m.jpg" alt="" /></a></li><li><a href="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0102.jpg" class="fancybox" rel="gallery-e901cdf7096ccfe5b5a5f8820ebcb060" title=""><img src="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0102_m.jpg" alt="" /></a></li><li><a href="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0090.jpg" class="fancybox" rel="gallery-e901cdf7096ccfe5b5a5f8820ebcb060" title=""><img src="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0090_m.jpg" alt="" /></a></li><li><a href="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0091.jpg" class="fancybox" rel="gallery-e901cdf7096ccfe5b5a5f8820ebcb060" title=""><img src="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0091_m.jpg" alt="" /></a></li><li><a href="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0092.jpg" class="fancybox" rel="gallery-e901cdf7096ccfe5b5a5f8820ebcb060" title=""><img src="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0092_m.jpg" alt="" /></a></li><li><a href="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0093.jpg" class="fancybox" rel="gallery-e901cdf7096ccfe5b5a5f8820ebcb060" title=""><img src="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0093_m.jpg" alt="" /></a></li><li><a href="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0094.jpg" class="fancybox" rel="gallery-e901cdf7096ccfe5b5a5f8820ebcb060" title=""><img src="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0094_m.jpg" alt="" /></a></li><li><a href="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0095.jpg" class="fancybox" rel="gallery-e901cdf7096ccfe5b5a5f8820ebcb060" title=""><img src="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0095_m.jpg" alt="" /></a></li><li><a href="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0096.jpg" class="fancybox" rel="gallery-e901cdf7096ccfe5b5a5f8820ebcb060" title=""><img src="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0096_m.jpg" alt="" /></a></li><li><a href="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0097.jpg" class="fancybox" rel="gallery-e901cdf7096ccfe5b5a5f8820ebcb060" title=""><img src="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0097_m.jpg" alt="" /></a></li><li><a href="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0098.jpg" class="fancybox" rel="gallery-e901cdf7096ccfe5b5a5f8820ebcb060" title=""><img src="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0098_m.jpg" alt="" /></a></li><li><a href="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0099.jpg" class="fancybox" rel="gallery-e901cdf7096ccfe5b5a5f8820ebcb060" title=""><img src="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0099_m.jpg" alt="" /></a></li><li><a href="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0100.jpg" class="fancybox" rel="gallery-e901cdf7096ccfe5b5a5f8820ebcb060" title=""><img src="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0100_m.jpg" alt="" /></a></li><li><a href="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0101.jpg" class="fancybox" rel="gallery-e901cdf7096ccfe5b5a5f8820ebcb060" title=""><img src="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0101_m.jpg" alt="" /></a></li><li><a href="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0104.jpg" class="fancybox" rel="gallery-e901cdf7096ccfe5b5a5f8820ebcb060" title=""><img src="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0104_m.jpg" alt="" /></a></li><li><a href="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0105.jpg" class="fancybox" rel="gallery-e901cdf7096ccfe5b5a5f8820ebcb060" title=""><img src="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0105_m.jpg" alt="" /></a></li><li><a href="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0106.jpg" class="fancybox" rel="gallery-e901cdf7096ccfe5b5a5f8820ebcb060" title=""><img src="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0106_m.jpg" alt="" /></a></li><li><a href="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0107.jpg" class="fancybox" rel="gallery-e901cdf7096ccfe5b5a5f8820ebcb060" title=""><img src="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0107_m.jpg" alt="" /></a></li><li><a href="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0108.jpg" class="fancybox" rel="gallery-e901cdf7096ccfe5b5a5f8820ebcb060" title=""><img src="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0108_m.jpg" alt="" /></a></li><li><a href="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0110.jpg" class="fancybox" rel="gallery-e901cdf7096ccfe5b5a5f8820ebcb060" title=""><img src="http://weiliv.github.io/images/ios7_UI_Preview/IMG_0110_m.jpg" alt="" /></a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting MD5 or SHA1 from NSData/NSString]]></title>
    <link href="http://weiliv.github.io/blog/2013/06/03/getting-md5-or-sha1-from-nsdata-slash-nsstring/"/>
    <updated>2013-06-03T18:58:00+08:00</updated>
    <id>http://weiliv.github.io/blog/2013/06/03/getting-md5-or-sha1-from-nsdata-slash-nsstring</id>
    <content type="html"><![CDATA[<p>Calculating the <code>md5</code> or <code>sha1</code> hash from <code>NSData/NSString</code> in iOS sdk is pretty simple.</p>

<h4>Step 1:</h4>

<p>The very first thing you need to do is import CommonCrypto’s CommonDigest.h</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="cp">#import &lt;CommonCrypto/CommonDigest.h&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Step 2:</h4>

<p>Here is Code （SHA1 from NSData）:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">file</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">pathForResource:</span><span class="s">@&quot;offlineLoading@2x.png&quot;</span> <span class="nl">ofType:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="n">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSData</span> <span class="nl">dataWithContentsOfFile:</span><span class="n">file</span><span class="p">];</span>
</span><span class='line'><span class="n">uint8_t</span> <span class="n">digest</span><span class="p">[</span><span class="n">CC_SHA1_DIGEST_LENGTH</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">CC_SHA1</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">bytes</span><span class="p">,</span> <span class="n">data</span><span class="p">.</span><span class="n">length</span><span class="p">,</span> <span class="n">digest</span><span class="p">);</span>
</span><span class='line'><span class="n">NSMutableString</span><span class="o">*</span> <span class="n">output</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableString</span> <span class="nl">stringWithCapacity:</span><span class="n">CC_SHA1_DIGEST_LENGTH</span> <span class="o">*</span> <span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">CC_SHA1_DIGEST_LENGTH</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">output</span> <span class="nl">appendFormat:</span><span class="s">@&quot;%02x&quot;</span><span class="p">,</span> <span class="n">digest</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>SHA1 from NSString:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nf">sha1:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">input</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">cstr</span> <span class="o">=</span> <span class="p">[</span><span class="n">input</span> <span class="nl">cStringUsingEncoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSData</span> <span class="nl">dataWithBytes:</span><span class="n">cstr</span> <span class="nl">length:</span><span class="n">input</span><span class="p">.</span><span class="n">length</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">uint8_t</span> <span class="n">digest</span><span class="p">[</span><span class="n">CC_SHA1_DIGEST_LENGTH</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">CC_SHA1</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">bytes</span><span class="p">,</span> <span class="n">data</span><span class="p">.</span><span class="n">length</span><span class="p">,</span> <span class="n">digest</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSMutableString</span><span class="o">*</span> <span class="n">output</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableString</span> <span class="nl">stringWithCapacity:</span><span class="n">CC_SHA1_DIGEST_LENGTH</span> <span class="o">*</span> <span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">CC_SHA1_DIGEST_LENGTH</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">[</span><span class="n">output</span> <span class="nl">appendFormat:</span><span class="s">@&quot;%02x&quot;</span><span class="p">,</span> <span class="n">digest</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">output</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>MD5 from NSString:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span> <span class="nf">md5:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span> <span class="n">input</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">cStr</span> <span class="o">=</span> <span class="p">[</span><span class="n">input</span> <span class="n">UTF8String</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">digest</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span><span class='line'>  <span class="n">CC_MD5</span><span class="p">(</span> <span class="n">cStr</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">cStr</span><span class="p">),</span> <span class="n">digest</span> <span class="p">);</span> <span class="c1">// This is the md5 call</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">NSMutableString</span> <span class="o">*</span><span class="n">output</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableString</span> <span class="nl">stringWithCapacity:</span><span class="n">CC_MD5_DIGEST_LENGTH</span> <span class="o">*</span> <span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">CC_MD5_DIGEST_LENGTH</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">[</span><span class="n">output</span> <span class="nl">appendFormat:</span><span class="s">@&quot;%02x&quot;</span><span class="p">,</span> <span class="n">digest</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span>  <span class="n">output</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[the Output of UIImage.size]]></title>
    <link href="http://weiliv.github.io/blog/2013/06/01/the-output-of-uiimage-dot-size/"/>
    <updated>2013-06-01T14:11:00+08:00</updated>
    <id>http://weiliv.github.io/blog/2013/06/01/the-output-of-uiimage-dot-size</id>
    <content type="html"><![CDATA[<p>The <code>size</code> reported by <code>UIImage</code> is in points, not pixels. You need to take into account the <code>scale</code> property of <code>UIImage</code>.</p>

<p>In other words, if <code>test.jpg</code> is 1000x1000 then <code>UIImage.size</code> will report 1000x1000. If <code>test@2x.png</code> is 2000x2000 then <code>UIImage.size</code> will also report 1000x1000. But in the 2nd case, <code>UIImage.scale</code> will report 2.</p>

<p><code>CGImageGetWidth</code> reports its width in pixels, not points. Or o convert UIImage points into pixels, you need to multiply by scale.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;someImage.png&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">NSInteger</span> <span class="n">pixelsInWidth</span> <span class="o">=</span> <span class="n">CGImageGetWidth</span><span class="p">(</span><span class="n">image</span><span class="p">.</span><span class="n">CGImage</span><span class="p">);</span>
</span><span class='line'><span class="c1">//or</span>
</span><span class='line'><span class="n">pixelsInWidth</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">*</span> <span class="n">image</span><span class="p">.</span><span class="n">scale</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modern Objective-C Syntax]]></title>
    <link href="http://weiliv.github.io/blog/2013/05/26/modern-objective-c-syntax/"/>
    <updated>2013-05-26T19:06:00+08:00</updated>
    <id>http://weiliv.github.io/blog/2013/05/26/modern-objective-c-syntax</id>
    <content type="html"><![CDATA[<p>Apple Inc&rsquo;s WWDC2012 involved lots of new properties of Objective-C, helping developpers write code with much more efficiency. What a pity that it is so late since I learned about thar from the WWDC2012 conference videos published on itunes.</p>

<h3>Object Literals</h3>

<p>That&rsquo;s awsome! Object literals enable you define NSNumber/NSArray/NSdictionary conveneiently. Let&rsquo;s review the tranditional method to define those objects:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">NSNumber</span> <span class="o">*</span> <span class="n">number</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithInt:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="n">NSArray</span> <span class="o">*</span> <span class="n">array</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="s">@&quot;one&quot;</span><span class="p">,</span> <span class="s">@&quot;two&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span> <span class="n">dict</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObjectsAndKeys:</span><span class="s">@&quot;value1&quot;</span><span class="p">,</span> <span class="s">@&quot;key1&quot;</span><span class="p">,</span> <span class="s">@&quot;value2&quot;</span><span class="p">,</span> <span class="s">@&quot;key2&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the above code can be refactered as follows,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">NSNumber</span> <span class="o">*</span> <span class="n">number</span> <span class="o">=</span> <span class="err">@</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">NSArray</span> <span class="o">*</span> <span class="n">array</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span><span class="s">@&quot;one&quot;</span><span class="p">,</span> <span class="s">@&quot;two&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span> <span class="n">dict</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;key1&quot;</span><span class="o">:</span><span class="s">@&quot;value1&quot;</span><span class="p">,</span> <span class="s">@&quot;key2&quot;</span><span class="o">:</span><span class="s">@&quot;value2&quot;</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>So neat!:) There is no longer need to append disgusting &ldquo;nil&rdquo; at the end of array and now the dictionay KV object&rsquo;s key can be place first! More examples as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="c1">// integer</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">fortyTwo</span> <span class="o">=</span> <span class="err">@</span><span class="mi">42</span><span class="p">;</span>             <span class="c1">// same as [NSNumber numberWithInt:42]</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">fortyTwoUnsigned</span> <span class="o">=</span> <span class="err">@</span><span class="mi">42</span><span class="n">U</span><span class="p">;</span>    <span class="c1">// same as [NSNumber numberWithUnsignedInt:42U]</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">fortyTwoLong</span> <span class="o">=</span> <span class="err">@</span><span class="mi">42L</span><span class="p">;</span>        <span class="c1">// same as [NSNumber numberWithLong:42L]</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">fortyTwoLongLong</span> <span class="o">=</span> <span class="err">@</span><span class="mi">42L</span><span class="n">L</span><span class="p">;</span>   <span class="c1">// same as [NSNumber numberWithLongLong:42LL]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// float</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">piFloat</span> <span class="o">=</span> <span class="err">@</span><span class="mf">3.141592654F</span><span class="p">;</span>    <span class="c1">// same as [NSNumber numberWithFloat:3.141592654F]</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">piDouble</span> <span class="o">=</span> <span class="err">@</span><span class="mf">3.1415926535</span><span class="p">;</span>   <span class="c1">// same as [NSNumber numberWithDouble:3.1415926535]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// bool</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">yesNumber</span> <span class="o">=</span> <span class="err">@</span><span class="n">YES</span><span class="p">;</span>           <span class="c1">// same as [NSNumber numberWithBool:YES]</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">noNumber</span> <span class="o">=</span> <span class="err">@</span><span class="n">NO</span><span class="p">;</span>             <span class="c1">// same as [NSNumber numberWithBool:NO]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// array with zero object</span>
</span><span class='line'><span class="n">NSArray</span> <span class="o">*</span> <span class="n">array</span> <span class="o">=</span> <span class="err">@</span><span class="p">[];</span>                <span class="c1">// same as [NSArray array]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// dictonary with zero KV</span>
</span><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span> <span class="n">dict</span> <span class="o">=</span> <span class="err">@</span><span class="p">{};</span>            <span class="c1">// same as [NSDictionary dictionary]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Aha, the code now are much more readable and beautiful~</p>

<h3>Tranverse Elements</h3>

<p>While the <code>for in</code> and <code>for(int i = 0)</code> are familiar to us, and tranversing a dictionary is always anoyed us as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span> <span class="n">dict</span> <span class="o">=</span> <span class="err">…</span>
</span><span class='line'><span class="n">NSArray</span> <span class="o">*</span> <span class="n">keys</span> <span class="o">=</span> <span class="p">[</span><span class="n">dict</span> <span class="n">allKeys</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span> <span class="n">key</span> <span class="k">in</span> <span class="n">keys</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span> <span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="n">dict</span> <span class="nl">objectForKey:</span><span class="n">key</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Throw that away! Now you can tranverse elements with block!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="p">[</span><span class="n">lines</span> <span class="nl">enumerateObjectsUsingBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span> <span class="n">obj</span><span class="p">,</span> <span class="n">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">_urlArguments</span> <span class="nl">enumerateKeysAndObjectsUsingBlock:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">key</span><span class="p">,</span> <span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>See? The block also support NSDictionary!</p>

<h3>Subscripting Method</h3>

<p>This new feature involed in WWDC2012 allows you get/set objects in array with bracket <code>[]</code>. In other words, the previous <code>[array objectAtIndex:idx]</code> and <code>[array replaceObjectAtIndex:idx withObject:obj]</code> can be rewitten as <code>array[idx]</code> and <code>array[idx] = obj</code>. Here are some examples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">NSArray</span> <span class="o">*</span> <span class="n">array</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span> <span class="s">@&quot;111&quot;</span><span class="p">,</span> <span class="s">@&quot;222&quot;</span><span class="p">,</span> <span class="s">@&quot;333&quot;</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;array[i] = %@&quot;</span><span class="p">,</span> <span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSMutableDictionary</span> <span class="o">*</span> <span class="n">dict</span> <span class="o">=</span><span class="p">[</span><span class="err">@</span><span class="p">{</span>  <span class="err">@</span><span class="mi">1</span><span class="o">:</span> <span class="s">@&quot;value1&quot;</span><span class="p">,</span>
</span><span class='line'>                                 <span class="err">@</span><span class="mi">2</span><span class="o">:</span> <span class="s">@&quot;value2&quot;</span><span class="p">,</span>
</span><span class='line'>                                 <span class="err">@</span><span class="mi">3</span><span class="o">:</span> <span class="s">@&quot;value3&quot;</span> <span class="p">}</span> <span class="n">mutableCopy</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;dict[%d] = %@&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">dict</span><span class="p">[</span><span class="err">@</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)]);</span>
</span><span class='line'>    <span class="n">dict</span><span class="p">[</span><span class="err">@</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;new %@&quot;</span><span class="p">,</span> <span class="n">dict</span><span class="p">[</span><span class="err">@</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)]];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">dict</span> <span class="nl">enumerateKeysAndObjectsUsingBlock:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">key</span><span class="p">,</span> <span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;dict[%@] = %@&quot;</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">dict</span><span class="p">[</span><span class="n">key</span><span class="p">]);</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the feature also works with NSDictionary. Moreover, you can provide this <code>[]</code> feature in your own class, just implmenting these two method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">objectAtIndexedSubscript:</span><span class="p">(</span><span class="n">NSUInterger</span><span class="p">)</span><span class="nv">idx</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">value</span> <span class="nf">atIndexedSubscript:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">idx</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In fact, this feature is not unfamiliar in other language, like C++ or Java. Maybe Objective-C was born in 1980s, it never improve that.
But, better late than never!~ Objective-C is always moving forward!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSRegularExpression Notes and Cheat Sheet]]></title>
    <link href="http://weiliv.github.io/blog/2013/05/19/nsregularexpression-notes-and-cheat-sheet/"/>
    <updated>2013-05-19T21:30:00+08:00</updated>
    <id>http://weiliv.github.io/blog/2013/05/19/nsregularexpression-notes-and-cheat-sheet</id>
    <content type="html"><![CDATA[<p>I&rsquo;m so shamed that little knowledge about RegularExpression was armed. Then I found a <a href="http://www.raywenderlich.com/30288/nsregularexpression-tutorial-and-cheat-sheet">blog</a> post by <a href="http://www.raywenderlich.com/">Ray Wenderlich</a>, an independent iOS developer whoes articals did have helped me a lot.</p>

<p>A regular expression (commonly known as a “regex”) is a string or a sequence of characters that specifies a pattern. Think of it as a search string — but with super powers!</p>

<p>A plain old search in a text editor or word processor will allow you to find simple matches. A regular expression can also perform these simple searches, but it takes things a step further and lets you search for patterns , such as two digits followed by letter, or three letters followed by a hyphen.</p>

<p>This pattern matching allows you to do useful things like validate fields (phone numbers, email addresses), check user input, perform advanced text manipulation and much much more.</p>

<p>In addition, I’ll give you a handy NSRegularExpression Cheat Sheet PDF that you can print out and use as reference as you’re developing!</p>

<p>Without further ado, it’s time to start crunching some regular expressions.</p>

<h3>The Basics Introduction</h3>

<p><em>Examples</em></p>

<p>Let’s start with a few brief examples to show you what regular expressions look like.</p>

<p>Here’s an example of a regular expression that matches the phrase “NSRegularExpression”:</p>

<p><code>NSRegularExpression</code></p>

<p>That’s about as simple as regular expressions get. You can use some APIs that are available in iOS to search a string of text for any part that matches this regular expression – and once you find a match, you can find where it is, or replace the text, etc.</p>

<p>Here’s a slightly more complicated example – this one matches the phrase “NSRegularExpression” or “NSRegularExpressions”:</p>

<p><code>NSRegularExpression(s)?</code></p>

<p>This is an example of using some special characters that are available in regular expressions. The parenthesis create a group, and the question mark says “match the previous element (the group in this case) 0 or 1 times”.</p>

<p>Now let’s go for a really complex example. This one matches any HTML or XML tag:</p>

<p><code>&lt;([a-z][a-z0-9]*)\b[^&gt;]*&gt;(.*?)</code></p>

<p>Wow, looks complicated, eh? :) Don’t worry, you’ll be learning about all the special characters in this regular expression in the rest of this tutorial, and by the time you’re done you should be able to understand how this works! :)</p>

<p><em>Testing Regular Expressions</em></p>

<p>In this tutorial, you’ll be creating a lot of regular expressions. If you want to try them out visually as you’re working with them, check out <a href="http://regexpal.com/">regexpal</a> , a web-based regular expression parser. Enter a regular expression in the top field, enter some text in the bottom field, and the matches in the searched text will automatically highlight.</p>

<p>Load up regexpal and try out the above example expressions one at a time. Here’s some good sample text to use:</p>

<p><code>NSRegularExpression tutorial or NSRegularExpressions tutorial. And here's an html tag.</code></p>

<p>Pretty handy, eh? It’s great to see regular expressions in action, so you can test out your own regular expressions as you’re working with them.</p>

<h3>Overall Concepts</h3>

<p>Before you go any further, it’s important to understand a few core concepts about regular expressions.</p>

<p><em>Literal characters</em> are the simplest kind of regular expression. They’re similar to a “find” operation in a word processor or text editor. For example, the single-character regular expression <code>t</code> will find all occurrences of the letter “t”, and the regular expression <code>hello</code> will find all appearances of “hello”. Pretty straightforward!</p>

<p>Just like a programming language, there are some “reserved” characters in regular expression syntax, as follows:</p>

<p><code>[</code>
<code>( and )</code>
<code>\</code>
<code>*</code>
<code>+</code>
<code>?</code>
<code>{ and }</code>
<code>^</code>
<code>$</code>
<code>.</code>
<code>|(pipe)</code>
<code>/</code></p>

<p>These characters are used for advanced pattern matching. If you want to search for one of these characters, you need to escape it with a backslash. For example, to search for all periods in a block of text, the pattern is not <code>.</code> but rather <code>\.</code> .</p>

<p>As an extra complication, since regular expressions are strings themselves, the backslash character needs to be escaped when working with <code>NSString</code> and <code>NSRegularExpression</code> . That means the standard regular expression <code>\.</code> will be written as <code>\\.</code> in your code.</p>

<p>To clarify the above concept in point form:</p>

<ul>
<li>The literal <code>@"\\."</code> defines a string that looks like this: .</li>
<li>The regular expression . will then match a single period character</li>
</ul>


<p><em>Capturing parentheses</em> are used to group part of a pattern. For example, <code>3 (pm|am)</code> would match the text &ldquo;3 pm&rdquo; as well as the text &ldquo;3 am&rdquo;. The pipe character here ( <code>|</code>) acts like an OR operator. You can include as many pipe characters in your regular expression as you would like. As an example, <code>(Tom|Dick|Harry)</code> is a valid pattern.</p>

<p>Grouping with parentheses comes in handy when you need to optionally match a certain text string. Say you are looking for &ldquo;November&rdquo; in some text, but the user may or may not have abbreviated the month as &ldquo;Nov&rdquo;. You can define the pattern as <code>Nov(ember)?</code> where the question mark after the capturing parentheses means that whatever is inside the parentheses is optional.</p>

<p>These parentheses are termed &ldquo;capturing&rdquo; because they capture the matched content and allow you reference it in other places in your regular expression.</p>

<p>As an example, assume you have the string &ldquo;Say hi to Harry&rdquo;. If you created a search-and-replace regular expression to replace any occurences of <code>(Tom|Dick|Harry)</code> with <code>that guy $1</code> , the result would be &ldquo;Say hi to that guy Harry&rdquo;. The <code>$1</code> allows you to reference the first captured group of the preceding rule.</p>

<p><em>Character classes</em> represent a set of possible single-character matches. Character classes appear between square brackets ( <code>[</code> and <code>]</code> ).</p>

<p>As an example, the regular expression <code>t[aeiou]</code> will match &ldquo;ta&rdquo;, &ldquo;te&rdquo;, &ldquo;ti&rdquo;, &ldquo;to&rdquo;, or &ldquo;tu&rdquo;. You can have as many character possibilities inside the square brackets as you like, but remember that any single character in the set will match. <code>[aeiou]</code> looks like five characters, but it actually means &ldquo;a&rdquo; or &ldquo;e&rdquo; or &ldquo;i&rdquo; or &ldquo;o&rdquo; or &ldquo;u&rdquo;.</p>

<p>You can also define a range in a character class if the characters appear consecutively. For example, to search for a number between 100 to 109, the pattern would be <code>10[0-9]</code> . This returns the same results as 10[0123456789] , but using ranges makes your regular expressions much cleaner and easier to understand.</p>

<p>But character classes aren&rsquo;t limited to numbers — you can do the same thing with characters. For instance, <code>[a-f]</code> will match &ldquo;a&rdquo;, &ldquo;b&rdquo;, &ldquo;c&rdquo;, &ldquo;d&rdquo;, &ldquo;e&rdquo;, or &ldquo;f&rdquo;.</p>

<p>Character classes usually contain the characters you want to match, but what if you want to explicitly not match a character? You can also define negated character classes, which use the <code>^</code> character. For example, the pattern <code>t[^o]</code> will match any combination of &ldquo;t&rdquo; and one other character except for the single instance of &ldquo;to&rdquo;.</p>

<h3>NSRegularExpressions Cheat Sheet</h3>

<p>Regular expressions are a great example of a simple syntax that can end up with some very complicated arrangements! Even the best regular expression wranglers keep a cheat sheet handy for those odd corner cases.</p>

<p>There is <a href="http://cdn5.raywenderlich.com/downloads/RW-NSRegularExpression-Cheatsheet.pdf">NSRegularExpression Cheat Sheet</a> PDF to help!</p>

<p>In addition, here&rsquo;s an abbreviated form of the cheat sheet below with some additional explanations to get started:</p>

<ul>
<li><code>.</code> matches any character. <code>p.p</code> matches pop, pup, pmp, p@p, and so on.</li>
<li><code>\w</code> matches any &ldquo;word-like&rdquo; character which includes the set of numbers, letters, and underscore, but does not match punctuation or other symbols. <code>hello\w</code> will match &ldquo;hello_9&rdquo; and &ldquo;helloo&rdquo; but not &ldquo;hello!&rdquo;</li>
<li><code>\d</code> matches a numeric digit, which in most cases means <code>[0-9]</code> . <code>\d\d?:\d\d</code> will match strings in time format, such as &ldquo;9:30&rdquo; and &ldquo;12:45&rdquo;.</li>
<li><code>\b</code> matches word boundary characters such as spaces and punctuation. <code>to\b</code> will match the &ldquo;to&rdquo; in &ldquo;to the moon&rdquo; and &ldquo;to!&rdquo;, but it will not match &ldquo;tomorrow&rdquo;. <code>\b</code> is handy for &ldquo;whole word&rdquo; type matching.</li>
<li><code>\s</code> matches whitespace characters such as spaces, tabs, and newlines. <code>hello\s</code> will match &ldquo;hello &rdquo; in &ldquo;Well, hello there!&rdquo;.</li>
<li><code>^</code> matches at the beginning of a line. Note that this particular <code>^</code> is different from <code>^</code> inside of the square brackets! For example, ^Hello will match against the string &ldquo;Hello there&rdquo;, but not &ldquo;He said Hello&rdquo;.</li>
<li><code>$</code> matches at the end of a line. For example, the <code>end$</code> will match against &ldquo;It was the end&rdquo; but not &ldquo;the end was near&rdquo;.</li>
<li><code>*</code> matches the previous element 0 or more times. <code>12*3</code> will match 13, 123, 1223, 122223, and 1222222223.</li>
<li><code>+</code> matches the previous element 1 or more times. 12+3 will match 123, 1223, 122223, 1222222223, but not 13.</li>
<li>Curly braces <code>{}</code> contain the minimum and maximum number of matches. For example, <code>10{1,2}1</code> will match both &ldquo;101&rdquo; and &ldquo;1001&rdquo; but not &ldquo;10001&rdquo; as the minimum number of matches is <code>1</code> and the maximum number of matches is <code>2</code> . <code>He[Ll]{2,}o</code> will match &ldquo;HeLLo&rdquo; and &ldquo;HellLLLllo&rdquo; and any such silly variation of &ldquo;hello&rdquo; with lots of L&rsquo;s, since the minimum number of matches is 2 but the maximum number of matches is not set — and therefore unlimited!</li>
</ul>


<p>That&rsquo;s <em>may</em> enough to get started!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create array of functions in ObjC]]></title>
    <link href="http://weiliv.github.io/blog/2013/05/08/create-array-of-functions-in-objc/"/>
    <updated>2013-05-08T13:59:00+08:00</updated>
    <id>http://weiliv.github.io/blog/2013/05/08/create-array-of-functions-in-objc</id>
    <content type="html"><![CDATA[<p>A requirement as follows,  <br/>
We need to test all the DotNet Http request APIs in one simple tester app. But that will anoy me much if single API is called line after line. So an array constructed with API functions will walk around that duplication of labor.  <br/>
Here is the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">createAPIFunctionsArray</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">selectorArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">selectorArray</span> <span class="nl">addObject:</span><span class="p">[</span><span class="n">NSValue</span> <span class="nl">valueWithPointer:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">initInfoWithBlock:</span><span class="p">)]];</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">selectorArray</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>It looks like funtion pointer in C, showing as @selector in ObjC. We use the selector array like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="p">[</span><span class="n">XXX</span> <span class="nl">performSelector:</span><span class="p">[[</span><span class="n">selectorArray</span> <span class="nl">objectAtIndex:</span><span class="n">self</span><span class="p">.</span><span class="n">index</span><span class="p">]</span> <span class="n">pointerValue</span><span class="p">]</span> <span class="nl">withObject:</span><span class="o">^</span><span class="p">(</span><span class="n">RequestStatusData</span> <span class="o">*</span><span class="n">resultData</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">//code block as param here ...</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>  
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Blog for Setting Goals]]></title>
    <link href="http://weiliv.github.io/blog/2013/04/20/my-first-blog-for-setting-goals/"/>
    <updated>2013-04-20T20:36:00+08:00</updated>
    <id>http://weiliv.github.io/blog/2013/04/20/my-first-blog-for-setting-goals</id>
    <content type="html"><![CDATA[<p>I still remember when maintaining MSN space the first year I entered college. Then now I come back! Coz during the busy developping work, I rarely have time to write down some of the tips I need to achive. And what most of all, I should refect on my life regularly and regularly which is the exactly thing I seldom do.</p>

<p>As the title says, here some of goals are listed that I should cost my passion to acheive, at least try my best before 2014.1.1. Though today is Apr 20th, 2013, better later than never to set goals!</p>

<h3>Goals on Work</h3>

<p>Though I&rsquo;ve acted as an IOS developper for more than a half year, I&rsquo;m still a newbie definitly. And new techs come out year by year, learning should never stop.</p>

<ul>
<li>Learn more about ARC principle of the IOS, and try to migrate our project to ARC. ARC is a free of worry  achitecture that can save us a lot of time debugging and optimizing the memory issures which have anoyed us  since the last year when we start CYZS project. So we can &ldquo;release&rdquo; our dev resource on memory leaking or crashing, then focus on the logical optimization.</li>
<li>When a new ios project kicks off, automating UI test should join in.</li>
<li>Try to participate on the server devlepment, learn relative knowlege from Lucky and Tom.</li>
<li>Be active on building of the engineers&#8217; culture in our company, such as orgnizing some coding games and attending some tech conferences or forums as Karry pointed out.</li>
</ul>


<h3>Goals on Life</h3>

<ul>
<li>Keeping fit

<ul>
<li>Running, from now on maybe 150km? Recheck with Nike+.</li>
<li>Basketball, once for 2 weeks.</li>
</ul>
</li>
<li>Guita, practice and practice.</li>
<li>Real estate, find one.</li>
<li>The most important one, you know that!</li>
</ul>


<p>Hope all the goals will be defeated at the end of 2013.</p>
]]></content>
  </entry>
  
</feed>
